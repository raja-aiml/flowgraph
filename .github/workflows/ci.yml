name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
    
    - name: Run golangci-lint
      run: golangci-lint run --config .golangci.yml --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Get dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 95" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 95% threshold"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 95% threshold"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  principle-check:
    name: Architectural Principles Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install tools
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        go install github.com/mibk/dupl@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run principle checks
      run: |
        chmod +x scripts/principle-check.sh
        ./scripts/principle-check.sh

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, principle-check]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.20', '1.21', '1.22']
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
    
    - name: Build
      run: |
        go build -v ./cmd/flowgraph
        go build -v ./cmd/flowgraph-server || echo "flowgraph-server not yet implemented"
    
    - name: Test build
      run: ./flowgraph version

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run integration tests
      run: |
        go test -v -tags=integration ./test/integration/... || echo "Integration tests not yet implemented"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-fmt json -out gosec-report.json ./...'
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: gosec-report
        path: gosec-report.json